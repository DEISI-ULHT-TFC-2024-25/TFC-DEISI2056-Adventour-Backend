// <auto-generated />
using System;
using Adventour.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Adventour.Api.Migrations
{
    [DbContext(typeof(AdventourContext))]
    [Migration("20250513202252_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Adventour.Api.Models.Database.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressOne")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_one");

                    b.Property<string>("AddressTwo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address_two");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("average_rating");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("id_country");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int")
                        .HasColumnName("duration_minutes");

                    b.Property<string>("LongDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("long_description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("short_description");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Attraction");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.AttractionImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.Property<string>("PictureRef")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("picture_ref");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.ToTable("Attraction_Images");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.AttractionInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction");

                    b.Property<int>("AttractionInfoTypeId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction_info_type");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("AttractionInfoTypeId");

                    b.ToTable("Attraction_Info");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.AttractionInfoType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("type_title");

                    b.HasKey("Id");

                    b.ToTable("Attraction_Info_Type");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)")
                        .HasColumnName("code");

                    b.Property<string>("ContinentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("continent_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Svg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("svg");

                    b.HasKey("Id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayNumber")
                        .HasColumnType("int")
                        .HasColumnName("day_number");

                    b.Property<int>("ItineraryId")
                        .HasColumnType("int")
                        .HasColumnName("id_itinerary");

                    b.HasKey("Id");

                    b.HasIndex("ItineraryId");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Itinerary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Itinerary");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name");

                    b.Property<string>("OauthId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("oauth_id");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photo_url");

                    b.Property<string>("Username")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("username");

                    b.Property<bool>("Verified")
                        .HasColumnType("bit")
                        .HasColumnName("verified");

                    b.HasKey("Id");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("rating");

                    b.HasKey("Id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttractionId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("comment");

                    b.Property<int>("RatingId")
                        .HasColumnType("int")
                        .HasColumnName("id_rating");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id_user");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Review");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.ReviewImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit")
                        .HasColumnName("is_main");

                    b.Property<string>("PictureRef")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("picture_ref");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("id_review");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("Review_Images");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Timeslot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int")
                        .HasColumnName("id_attraction");

                    b.Property<int>("DayId")
                        .HasColumnType("int")
                        .HasColumnName("id_day");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_time");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("DayId");

                    b.ToTable("Timeslot");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Attraction", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Country", "Country")
                        .WithMany("Attractions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.AttractionImages", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Attraction", null)
                        .WithMany("AttractionImages")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.AttractionInfo", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Attraction", "Attraction")
                        .WithMany("AttractionInfos")
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adventour.Api.Models.Database.AttractionInfoType", "AttractionInfoType")
                        .WithMany()
                        .HasForeignKey("AttractionInfoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("AttractionInfoType");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Day", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Itinerary", "Itinerary")
                        .WithMany("Days")
                        .HasForeignKey("ItineraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Itinerary");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Favorites", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adventour.Api.Models.Database.Person", "Person")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Itinerary", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Person", "Person")
                        .WithMany("Itineraries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Review", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adventour.Api.Models.Database.Rating", "Rating")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Adventour.Api.Models.Database.Person", "Person")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Person");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.ReviewImages", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Review", "Review")
                        .WithMany()
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Timeslot", b =>
                {
                    b.HasOne("Adventour.Api.Models.Database.Attraction", "Attraction")
                        .WithMany()
                        .HasForeignKey("AttractionId");

                    b.HasOne("Adventour.Api.Models.Database.Day", "Day")
                        .WithMany("Timeslots")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attraction");

                    b.Navigation("Day");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Attraction", b =>
                {
                    b.Navigation("AttractionImages");

                    b.Navigation("AttractionInfos");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Country", b =>
                {
                    b.Navigation("Attractions");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Day", b =>
                {
                    b.Navigation("Timeslots");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Itinerary", b =>
                {
                    b.Navigation("Days");
                });

            modelBuilder.Entity("Adventour.Api.Models.Database.Person", b =>
                {
                    b.Navigation("Itineraries");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
